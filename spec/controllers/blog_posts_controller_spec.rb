require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe BlogPostsController, type: :controller do
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BlogPostsController. Be sure to keep this updated too.

  let(:blog_post) { FactoryGirl.create(:blog_post) }
  let(:tagged_post) { FactoryGirl.create(:blog_post, tags: ['test']) }
  let(:typed_post) { FactoryGirl.create(:blog_post, post_type: 'link') }

  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'assigns all blog_posts as @blog_posts' do
      get :index, {}, valid_session
      expect(assigns(:blog_posts)).to eq([blog_post, tagged_post, typed_post].sort_by(&:publish_at).reverse)
    end

    it 'shows tagged posts only when tag present' do
      get :index, { tag: 'test' }, valid_session
      expect(assigns(:blog_posts)).to eq([tagged_post])
    end

    it 'shows typed posts only when type present' do
      get :index, { type: 'link' }, valid_session
      expect(assigns(:blog_posts)).to eq([typed_post])
    end
  end

  describe 'GET #show' do
    it 'assigns the requested blog_post as @blog_post' do
      get :show, { permalink: blog_post.permalink.sub(%r{^/}, '') }, valid_session
      expect(assigns(:blog_post)).to eq(blog_post)
    end
  end
end
